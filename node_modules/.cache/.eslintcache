[{"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/index.js":"1","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/beacons_app.js":"2","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/links_editor.js":"3","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/links_preview.js":"4","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/create_link_modal.js":"5","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/edit_link_modal.js":"6","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/editable_link.js":"7","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/preview_link.js":"8","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/settings_modal.js":"9","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/confirm_link_deletion_modal.js":"10"},{"size":347,"mtime":1627086509751,"results":"11","hashOfConfig":"12"},{"size":1843,"mtime":1627159205757,"results":"13","hashOfConfig":"12"},{"size":4404,"mtime":1627158691298,"results":"14","hashOfConfig":"12"},{"size":950,"mtime":1627159802722,"results":"15","hashOfConfig":"12"},{"size":2341,"mtime":1627153420680,"results":"16","hashOfConfig":"12"},{"size":2782,"mtime":1627158215762,"results":"17","hashOfConfig":"12"},{"size":1149,"mtime":1627156596711,"results":"18","hashOfConfig":"12"},{"size":1939,"mtime":1627152256523,"results":"19","hashOfConfig":"12"},{"size":3038,"mtime":1627157798480,"results":"20","hashOfConfig":"12"},{"size":967,"mtime":1627158883685,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"6nvh1u",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"24"},"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/index.js",[],["50","51"],"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/beacons_app.js",[],"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/links_editor.js",["52","53","54","55","56","57"],"\n/**\n * Area where users can edit their links\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\n import './styles/links_editor.scss';\n import CreateLinkModal from './create_link_modal';\n import {Modal, Button} from 'react-bootstrap';\n import 'bootstrap/dist/css/bootstrap.min.css';\n import React, {useState, useCallback} from 'react';\n import PropTypes from 'prop-types';\nimport EditLinkModal from './edit_link_modal';\nimport EditableLink from './editable_link';\nimport SettingsModal from './settings_modal';\nimport ConfirmLinkDeletionModal from './confirm_link_deletion_modal';\n\n function LinksEditor(props) {\n  const [showNewLinkModal, setShowNewLinkModal] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showEditLinkModal, setShowEditLinkModal] = useState(false);\n  const [showConfirmDeleteModal, setShowConfirmDeleteModal] = useState(false);\n  const [deleteLinkId, setDeleteLinkId] = useState(-1);\n  const [editLink, setEditLink] = useState(null);\n\n\n  const handleCloseSettings = () => setShowSettings(false);\n  const handleShowSettings= () => setShowSettings(true);\n\n  const handleDeleteLink = useCallback((linkId) => {\n    setShowConfirmDeleteModal(true);\n    setDeleteLinkId(linkId);\n  }, []);\n\n  const deleteLink = () => {\n    props.setUserLinks((prevUserLinks) => {\n      let updatedUserLinks = [...prevUserLinks];\n      const index = updatedUserLinks.findIndex(userLink => userLink.id === deleteLinkId);\n      if (index == -1) {\n        return updatedUserLinks;\n      }\n      updatedUserLinks.splice(index, 1);\n      return updatedUserLinks;\n    }); \n    setShowConfirmDeleteModal(false);\n\n    const requestOptions = {\n      method: 'DELETE'\n    };\n    const url = `https://retoolapi.dev/lqtPSO/links/${deleteLinkId}`;\n    fetch(url, requestOptions);\n  }\n\n  const handleEditLink = useCallback((linkId) => {\n    const index = props.userLinks.findIndex(userLink => userLink.id === linkId);\n    if (index == -1) {\n      return;\n    }\n\n    setEditLink({...props.userLinks[index]});\n    setShowEditLinkModal(true);\n  }, []);\n\n   return (\n     <div className=\"links-editor-container\">\n       <h2 className=\"links-editor-header\">Links Editor</h2>\n       <span className=\"settings-btn\" onClick={handleShowSettings}>&#9881;</span>\n        <ul className=\"editable-links\">\n          {props.userLinks.map((userLink, index) => (\n            <EditableLink\n              key={userLink.id} \n              linkId={userLink.id}\n              linkTitle={userLink.title}\n              linkUrl={userLink.url}\n              linkClicks={userLink.clicks}\n              handleEditLink={handleEditLink}\n              handleDeleteLink={handleDeleteLink}\n            />\n          ))}\n        </ul>\n        <div className=\"create-link-btn-container\">\n          <span className=\"create-link-btn\" onClick={() => setShowNewLinkModal(true)}>Add Link</span>\n        </div>\n      {showNewLinkModal &&\n        <CreateLinkModal \n          setShowNewLinkModal={setShowNewLinkModal}\n          setUserLinks={props.setUserLinks}\n        />\n      }\n\n      {showSettings &&\n        <SettingsModal \n          linkBackgroundColor={props.linkBackgroundColor}\n          linkColor={props.linkColor}\n          isLinkEdgeRounded={props.isLinkEdgeRounded}\n          setLinkBackgroundColor={props.setLinkBackgroundColor}\n          setLinkColor={props.setLinkColor}\n          setIsLinkEdgeRounded={props.setIsLinkEdgeRounded}\n          setShowSettings={setShowSettings}\n        />\n      }\n\n      {showEditLinkModal &&\n        <EditLinkModal\n          setShowEditLinkModal={setShowEditLinkModal}\n          editLink={editLink}\n          setUserLinks={props.setUserLinks}\n        />\n      }\n\n      {showConfirmDeleteModal &&\n        <ConfirmLinkDeletionModal\n        showConfirmDeleteModal={showConfirmDeleteModal} \n          setShowConfirmDeleteModal={setShowConfirmDeleteModal}\n          deleteLink={deleteLink}\n        />\n      }      \n      \n     </div>\n   );\n }\n\nLinksEditor.propTypes = {\n  userLinks: PropTypes.array.isRequired,\n  setUserLinks: PropTypes.func.isRequired,\n  linkBackgroundColor: PropTypes.string.isRequired,\n  linkColor: PropTypes.string.isRequired,\n  isLinkEdgeRounded: PropTypes.bool.isRequired,\n  setLinkBackgroundColor: PropTypes.func.isRequired,\n  setLinkColor: PropTypes.func.isRequired,\n  setIsLinkEdgeRounded: PropTypes.func.isRequired\n};\n \n export default LinksEditor;","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/links_preview.js",[],"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/create_link_modal.js",["58","59","60","61","62"],"\n/**\n * Modal to create new link\n *\n * @copyright 2021 Beacons - All rights reserved\n */\n\n import './styles/beacons_app.scss';\n import React, {useState, useEffect} from 'react';\n import {Modal, Button} from 'react-bootstrap';\n import PropTypes from 'prop-types';\n import validator from 'validator'\n\nfunction CreateLinkModal(props) {\n  const [linkTitle, setLinkTitle] = useState('');\n  const [linkUrl, setLinkUrl] = useState('');\n  const [newLink, setNewLink] = useState(null);\n  const [formErrorMsg, setFormErrorMsg] = useState('');\n\nconst handleLinkTitleChange = (event) => {\n  const intputTitle = event.target.value;\n  setLinkTitle(intputTitle);\n};\n\nconst handleLinkUrlChange = (event) => {\n  const intputUrl = event.target.value;\n  setLinkUrl(intputUrl);\n};\n\nconst handleSubmit = () => {\n  if (linkTitle == '') {\n    setFormErrorMsg('Please provide a valid title.');\n    return;\n  }\n  if (!validator.isURL(linkUrl)) {\n    setFormErrorMsg('Please provide a valid url.');\n    return;\n  }\n\n  const newUserLink = {\n    title: linkTitle,\n    url: linkUrl,\n    clicks: 0\n  }\n  props.setUserLinks(prevUserLinks => {\n    const maxId = Math.max(...prevUserLinks.map(link => link.id));\n    const localNewUserLink = {...newUserLink, id: maxId + 1}\n    return [...prevUserLinks, localNewUserLink];\n  });\n  saveNewLink(newUserLink);\n  props.setShowNewLinkModal(false);\n};\n\nconst saveNewLink = (newLink) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(newLink)\n  };\n  fetch('https://retoolapi.dev/lqtPSO/links', requestOptions);\n}\n\n  return (\n  <Modal show={true} onHide={() => props.setShowNewLinkModal(false)} animation={false}>\n    <Modal.Header closeButton>\n      <Modal.Title>Create Link</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n    <input className=\"add-link-title\" type=\"text\" placeholder=\"Link Title\" onChange={handleLinkTitleChange} />\n      <input className=\"add-link-url\" type=\"text\" placeholder=\"Link Url\" onChange={handleLinkUrlChange} />\n      <button className=\"add-link-btn\" onClick={handleSubmit}>Add Link</button>\n      <span>{formErrorMsg}</span>\n    </Modal.Body>\n  </Modal>\n  );\n}\n\nCreateLinkModal.propTypes = {\n  setShowNewLinkModal: PropTypes.func.isRequired,\n  setUserLinks: PropTypes.func.isRequired\n};\n\nexport default CreateLinkModal;","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/edit_link_modal.js",["63","64","65","66"],"/**\n * Modal to edit link\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\n import './styles/edit_link_modal.scss';\n import React, {useState, useEffect} from 'react';\n import {Modal, Button} from 'react-bootstrap';\n import PropTypes from 'prop-types';\n import validator from 'validator'\n\nfunction EditLinkModal(props) {\n  const [linkTitle, setLinkTitle] = useState(props.editLink.title);\n  const [linkUrl, setLinkUrl] = useState(props.editLink.url);\n  const [formErrorMsg, setFormErrorMsg] = useState('');\n\nconst handleLinkTitleChange = (event) => {\n  const intputTitle = event.target.value;\n  setLinkTitle(intputTitle);\n};\n\nconst handleLinkUrlChange = (event) => {\n  const intputUrl = event.target.value;\n  setLinkUrl(intputUrl);\n};\n\nconst handleSubmit = (linkId) => {\n  if (linkTitle == '') {\n    setFormErrorMsg('Please provide a valid title.');\n    return;\n  }\n  if (!validator.isURL(linkUrl)) {\n    setFormErrorMsg('Please provide a valid url.');\n    return;\n  }\n\n  props.setUserLinks(prevUserLinks => {\n    let updatedUserLinks = [...prevUserLinks]\n    const index = updatedUserLinks.findIndex(userLink => userLink.id === linkId);\n    if (index == -1) {\n      return updatedUserLinks;\n    }\n\n    props.editLink.title = linkTitle;\n    props.editLink.url = linkUrl;\n    updatedUserLinks[index] = props.editLink\n    return updatedUserLinks;\n  });\n\n  const updatedLinkData = {\n    title: linkTitle,\n    url: linkUrl\n  }\n  saveNewLink(updatedLinkData, linkId);\n  props.setShowEditLinkModal(false);\n};\n\nconst saveNewLink = (updatedLinkData, linkId) => {\n  const requestOptions = {\n    method: 'PATCH',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(updatedLinkData)\n  };\n  const url = `https://retoolapi.dev/lqtPSO/links/${linkId}`;\n  fetch(url, requestOptions);\n}\n\n  return (\n    <Modal show={true} onHide={() => props.setShowEditLinkModal(false)} animation={false}>\n    <Modal.Header closeButton>\n      <Modal.Title>Edit Post</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n      <span className=\"edit-link-modal-label\">Update Title</span>\n    <input className=\"edit-link-modal-input\" type=\"text\" placeholder={props.editLink.title} onChange={handleLinkTitleChange} />\n    <span className=\"edit-link-modal-label\">Update Url</span>\n     <input className=\"edit-link-modal-input\" type=\"text\" placeholder={props.editLink.url} onChange={handleLinkUrlChange} />\n     <button className=\"edit-link-submit-btn\" onClick={() => handleSubmit(props.editLink.id)}>Edit Link</button>\n     <span>{formErrorMsg}</span>\n    </Modal.Body>\n  </Modal>\n  );\n}\n\nEditLinkModal.propTypes = {\n  setShowEditLinkModal: PropTypes.func.isRequired,\n  editLink: PropTypes.object.isRequired,\n  setUserLinks: PropTypes.func.isRequired\n};\n\nexport default EditLinkModal;","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/editable_link.js",["67","68"],"\n/**\n * Editable link\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\n import PropTypes from 'prop-types';\nimport './styles/editable_link.scss';\nimport React, {useState, memo} from 'react';\nimport EditLinkModal from './edit_link_modal';\n\nfunction EditableLink(props) {\n\n  console.log(\"Rendering editable link\");\n\n   return (\n    <li className=\"editable-link-item\">\n      <span className=\"editable-link-title\">{props.linkTitle}</span>\n      <span className=\"editable-link-url\">{props.linkUrl}</span>\n      <span className=\"editable-link-clicks\">Clicks - {props.linkClicks}</span>\n      <span className=\"edit-link-btn\" onClick={() => {props.handleEditLink(props.linkId)}}>&#9998;</span>\n      <span className=\"delete-link-btn\" onClick={() => {props.handleDeleteLink(props.linkId)}}>Remove</span>\n    </li>\n   );\n }\n\nEditableLink.propTypes = {\n  linkId: PropTypes.number.isRequired,\n  linkTitle: PropTypes.string.isRequired,\n  linkUrl: PropTypes.string.isRequired,\n  linkClicks: PropTypes.number.isRequired,\n  handleEditLink: PropTypes.func.isRequired,\n  handleDeleteLink: PropTypes.func.isRequired\n};\n\n export default memo(EditableLink);","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/preview_link.js",["69","70","71"],"\n/**\n * Preview link\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\n import PropTypes from 'prop-types';\nimport './styles/preview_link.scss';\nimport React, {useState} from 'react';\n\n function PreviewLink(props) {\n\n  console.log(\"rendering preview link\");\n\n  const listStyle = {\n    backgroundColor: props.linkBackgroundColor\n  };\n\n  const anchorStyle = {\n    color: props.linkColor\n  }\n\n  const isLinkRoundedEdgeCSSClass = props.isLinkEdgeRounded ? 'rounded-link-edge' : '';\n\n  const trackLinkClick = () => {\n    const updatedClicks = props.linkClicks + 1;\n    props.setUserLinks(prevUserLinks => {\n      let updatedUserLinks = [...prevUserLinks]\n      const index = updatedUserLinks.findIndex(userLink => userLink.id === props.linkId);\n      if (index == -1) {\n        return updatedUserLinks;\n      }\n  \n      updatedUserLinks[index].clicks = updatedClicks;\n      console.log(\"final array\");\n      console.log(updatedUserLinks);\n      return updatedUserLinks;\n    });\n\n\n    const requestOptions = {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({clicks: updatedClicks})\n    };\n    const url = `https://retoolapi.dev/lqtPSO/links/${props.linkId}`;\n    fetch(url, requestOptions);\n  };\n\n   return (\n    <li className={`live-link-item ${isLinkRoundedEdgeCSSClass}`} style={listStyle} onClick={trackLinkClick}>\n      <a className=\"live-link-anchor\" href={props.linkUrl} style={anchorStyle} target=\"_blank\">{props.linkTitle}</a>\n    </li>\n   );\n }\n\nPreviewLink.propTypes = {\n  linkId: PropTypes.number.isRequired,\n  linkTitle: PropTypes.string.isRequired,\n  linkUrl: PropTypes.string.isRequired,\n  linkClicks: PropTypes.number.isRequired,\n  setUserLinks: PropTypes.func.isRequired,\n  linkBackgroundColor: PropTypes.string.isRequired,\n  linkColor: PropTypes.string.isRequired,\n  isLinkEdgeRounded: PropTypes.bool.isRequired\n};\n \n export default React.memo(PreviewLink);","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/settings_modal.js",["72","73"],"\n/**\n * Modal to update settings\n *\n * @copyright 2021 Beacons - All rights reserved\n */\n\n import './styles/settings_modal.scss';\n import React, {useState, useEffect} from 'react';\n import {Modal, Button} from 'react-bootstrap';\n import PropTypes from 'prop-types';\n\nfunction SettingsModal(props) {\n  const [inputLinkBackgroundColor, setInputLinkBackgroundColor] = useState(props.linkBackgroundColor);\n  const [inputLinkColor, setInputLinkColor] = useState(props.linkColor);\n  const [inputIsLinkEdgeRounded, setInputIsLinkEdgeRounded] = useState(props.isLinkEdgeRounded);\n\nconst handleLinkBackgroundColor = (event) => {\n  const inputLinkBackgroundColor = event.target.value;\n  setInputLinkBackgroundColor(inputLinkBackgroundColor);\n};\n\nconst handleLinkColor = (event) => {\n  const inputLinkColor = event.target.value;\n  setInputLinkColor(inputLinkColor);\n};\n\nconst handleLinkEdgesChange = (inputIsLinkEdgeRounded) => {\n  setInputIsLinkEdgeRounded(inputIsLinkEdgeRounded);\n};\n\nconst handleSubmit = () => {\n  props.setLinkBackgroundColor(inputLinkBackgroundColor);\n  props.setLinkColor(inputLinkColor);\n  props.setIsLinkEdgeRounded(inputIsLinkEdgeRounded);\n  props.setShowSettings(false);\n};\n\n\n  return (\n    <Modal show={true} onHide={() => props.setShowSettings(false)} animation={false}>\n    <Modal.Header closeButton>\n      <Modal.Title>Settings</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n    <span className=\"settings-form-label\">Link Background Color</span>\n    <input className=\"change-link-background\" type=\"text\" placeholder={inputLinkBackgroundColor} onChange={handleLinkBackgroundColor} />\n    <span className=\"settings-form-label\">Link Color</span>\n    <input className=\"change-link-color\" type=\"text\" placeholder={inputLinkColor} onChange={handleLinkColor}/>\n    <span className=\"settings-form-label\">Link Styling</span>\n    <div className=\"link-corner-styling-selection\">\n      <input className=\"link-style-radio-btn\" type=\"radio\" id=\"rounded-option\" name=\"rounded-option\" value=\"round\" defaultChecked={props.isLinkEdgeRounded} onChange={() => handleLinkEdgesChange(true)} />\n      <label className=\"link-style-radio-btn-label\" for=\"rounded-option\">Rounded Corners</label>\n      <br />\n      <input className=\"link-style-radio-btn\" type=\"radio\" id=\"straight-option\" name=\"rounded-option\" value=\"straight\" defaultChecked={!props.isLinkEdgeRounded} onChange={() => handleLinkEdgesChange(false)}/>\n      <label className=\"link-style-radio-btn-label\" for=\"straight-option\">Straight Corners</label> \n    </div>\n     <button className=\"save-settings-btn\" onClick={handleSubmit}>Save</button>\n    </Modal.Body>\n  </Modal>\n  );\n}\n\nSettingsModal.propTypes = {\n  linkBackgroundColor: PropTypes.string.isRequired,\n  linkColor: PropTypes.string.isRequired,\n  isLinkEdgeRounded: PropTypes.bool.isRequired,\n  setLinkBackgroundColor: PropTypes.func.isRequired,\n  setLinkColor: PropTypes.func.isRequired,\n  setIsLinkEdgeRounded: PropTypes.func.isRequired,\n  setShowSettings: PropTypes.func.isRequired\n};\n\nexport default SettingsModal;","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/confirm_link_deletion_modal.js",["74"],"/**\n * Modal to confirm link deletion\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\n import PropTypes from 'prop-types';\nimport './styles/confirm_link_deletion_modal.scss';\nimport {Modal, Button} from 'react-bootstrap';\n\n function ConfirmLinkDeletionModal(props) {\n\n   return (\n    <Modal show={props.showConfirmDeleteModal} onHide={() => props.setShowConfirmDeleteModal(false)} animation={false}>\n        <Modal.Header closeButton>\n          <Modal.Title>Are you sure you want to delete this link?</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        <button className=\"confirm-link-deletion-btn\" onClick={() => props.deleteLink()}>Delete</button>\n        </Modal.Body>\n        </Modal>\n   );\n }\n\n ConfirmLinkDeletionModal.propTypes = {\n   showConfirmDeleteModal: PropTypes.bool.isRequired,\n  setShowConfirmDeleteModal: PropTypes.func.isRequired,\n  deleteLink: PropTypes.func.isRequired\n };\n\n\n \n export default ConfirmLinkDeletionModal;",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":10,"column":10,"nodeType":"81","messageId":"82","endLine":10,"endColumn":15},{"ruleId":"79","severity":1,"message":"83","line":10,"column":17,"nodeType":"81","messageId":"82","endLine":10,"endColumn":23},{"ruleId":"79","severity":1,"message":"84","line":28,"column":9,"nodeType":"81","messageId":"82","endLine":28,"endColumn":28},{"ruleId":"85","severity":1,"message":"86","line":40,"column":17,"nodeType":"87","messageId":"88","endLine":40,"endColumn":19},{"ruleId":"85","severity":1,"message":"86","line":57,"column":15,"nodeType":"87","messageId":"88","endLine":57,"endColumn":17},{"ruleId":"89","severity":1,"message":"90","line":63,"column":6,"nodeType":"91","endLine":63,"endColumn":8,"suggestions":"92"},{"ruleId":"79","severity":1,"message":"93","line":9,"column":27,"nodeType":"81","messageId":"82","endLine":9,"endColumn":36},{"ruleId":"79","severity":1,"message":"83","line":10,"column":17,"nodeType":"81","messageId":"82","endLine":10,"endColumn":23},{"ruleId":"79","severity":1,"message":"94","line":17,"column":10,"nodeType":"81","messageId":"82","endLine":17,"endColumn":17},{"ruleId":"79","severity":1,"message":"95","line":17,"column":19,"nodeType":"81","messageId":"82","endLine":17,"endColumn":29},{"ruleId":"85","severity":1,"message":"86","line":31,"column":17,"nodeType":"87","messageId":"88","endLine":31,"endColumn":19},{"ruleId":"79","severity":1,"message":"93","line":8,"column":27,"nodeType":"81","messageId":"82","endLine":8,"endColumn":36},{"ruleId":"79","severity":1,"message":"83","line":9,"column":17,"nodeType":"81","messageId":"82","endLine":9,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":29,"column":17,"nodeType":"87","messageId":"88","endLine":29,"endColumn":19},{"ruleId":"85","severity":1,"message":"86","line":41,"column":15,"nodeType":"87","messageId":"88","endLine":41,"endColumn":17},{"ruleId":"79","severity":1,"message":"96","line":10,"column":16,"nodeType":"81","messageId":"82","endLine":10,"endColumn":24},{"ruleId":"79","severity":1,"message":"97","line":11,"column":8,"nodeType":"81","messageId":"82","endLine":11,"endColumn":21},{"ruleId":"79","severity":1,"message":"96","line":10,"column":16,"nodeType":"81","messageId":"82","endLine":10,"endColumn":24},{"ruleId":"85","severity":1,"message":"86","line":31,"column":17,"nodeType":"87","messageId":"88","endLine":31,"endColumn":19},{"ruleId":"98","severity":1,"message":"99","line":53,"column":7,"nodeType":"100","messageId":"101","endLine":53,"endColumn":96,"fix":"102"},{"ruleId":"79","severity":1,"message":"93","line":9,"column":27,"nodeType":"81","messageId":"82","endLine":9,"endColumn":36},{"ruleId":"79","severity":1,"message":"83","line":10,"column":17,"nodeType":"81","messageId":"82","endLine":10,"endColumn":23},{"ruleId":"79","severity":1,"message":"83","line":9,"column":16,"nodeType":"81","messageId":"82","endLine":9,"endColumn":22},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'handleCloseSettings' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props.userLinks'. Either include it or remove the dependency array. If 'setEditLink' needs the current value of 'props.userLinks', you can also switch to useReducer instead of useState and read 'props.userLinks' in the reducer.","ArrayExpression",["105"],"'useEffect' is defined but never used.","'newLink' is assigned a value but never used.","'setNewLink' is assigned a value but never used.","'useState' is defined but never used.","'EditLinkModal' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"106","text":"107"},"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},[1477,1477]," rel=\"noreferrer\"","Update the dependencies array to be: [props.userLinks]",{"range":"110","text":"111"},[2076,2078],"[props.userLinks]"]