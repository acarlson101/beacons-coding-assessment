[{"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/index.js":"1","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/beacons_app.js":"2","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/links_editor.js":"3","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/links_preview.js":"4","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/create_link_modal.js":"5","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/edit_link_modal.js":"6","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/editable_link.js":"7","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/preview_link.js":"8","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/settings_modal.js":"9","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/confirm_link_deletion_modal.js":"10","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/core/api_constants.js":"11"},{"size":347,"mtime":1627086509751,"results":"12","hashOfConfig":"13"},{"size":1988,"mtime":1627165764571,"results":"14","hashOfConfig":"13"},{"size":4374,"mtime":1627165674076,"results":"15","hashOfConfig":"13"},{"size":1128,"mtime":1627165842147,"results":"16","hashOfConfig":"13"},{"size":2635,"mtime":1627164976211,"results":"17","hashOfConfig":"13"},{"size":3068,"mtime":1627165205360,"results":"18","hashOfConfig":"13"},{"size":1184,"mtime":1627166113107,"results":"19","hashOfConfig":"13"},{"size":2135,"mtime":1627166125094,"results":"20","hashOfConfig":"13"},{"size":3057,"mtime":1627166181423,"results":"21","hashOfConfig":"13"},{"size":935,"mtime":1627164653126,"results":"22","hashOfConfig":"13"},{"size":181,"mtime":1627164038029,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"6nvh1u",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/index.js",[],["52","53"],"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/beacons_app.js",["54"],"\n/**\n * Beacons main application\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\nimport './styles/beacons_app.scss';\nimport LinksEditor from './links_editor';\nimport LinksPreview from './links_preview';\nimport React, {useState, useEffect} from 'react';\nimport { BEACONS_BACKEND_API_BASE_URL } from './core/api_constants';\nimport PropTypes from 'prop-types';\n\nconst BeaconsApp = () => {\n  const getUserLinks = () => {\n    fetch(BEACONS_BACKEND_API_BASE_URL)\n    .then(result => result.json())\n    .then(\n      (result) => {\n        setUserLinks(result);\n        setIsInitialLoadComplete(true);\n      },\n      (error) => {\n       // In a production system, we would log here\n      }\n    )\n  };\n\n  const [userLinks, setUserLinks] = useState([]);\n  const [isInitialLoadComplete, setIsInitialLoadComplete] = useState(false);\n  const [linkBackgroundColor, setLinkBackgroundColor] = useState('#6495ED');\n  const [linkColor, setLinkColor] = useState('#ffffff');\n  const [isLinkEdgeRounded, setIsLinkEdgeRounded] = useState(false);\n\n  // Gather links data from backend api once\n  useEffect(() => {\n    setUserLinks(getUserLinks());\n  }, []);\n\n  return (\n    <div className=\"beacons-app-container\">\n      {isInitialLoadComplete &&\n      <div className=\"links-container\">\n        <LinksEditor\n          userLinks={userLinks}\n          setUserLinks={setUserLinks}\n          linkBackgroundColor={linkBackgroundColor}\n          linkColor={linkColor}\n          isLinkEdgeRounded={isLinkEdgeRounded}\n          setLinkBackgroundColor={setLinkBackgroundColor}\n          setLinkColor={setLinkColor}\n          setIsLinkEdgeRounded={setIsLinkEdgeRounded}\n        />\n        <LinksPreview \n          userLinks={userLinks}\n          setUserLinks={setUserLinks}\n          linkBackgroundColor={linkBackgroundColor}\n          linkColor={linkColor}\n          isLinkEdgeRounded={isLinkEdgeRounded}\n        />\n      </div>\n    }\n    </div>\n  );\n}\n\nBeaconsApp.propTypes = {};\n \nexport default BeaconsApp;","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/links_editor.js",["55","56","57"],"\n/**\n * Area where users can edit their links\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\nimport './styles/links_editor.scss';\nimport CreateLinkModal from './create_link_modal';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, {useState, useCallback} from 'react';\nimport PropTypes from 'prop-types';\nimport EditLinkModal from './edit_link_modal';\nimport EditableLink from './editable_link';\nimport SettingsModal from './settings_modal';\nimport ConfirmLinkDeletionModal from './confirm_link_deletion_modal';\nimport { BEACONS_BACKEND_API_BASE_URL } from './core/api_constants';\n\nconst LinksEditor = (props) => {\n  const [showNewLinkModal, setShowNewLinkModal] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showEditLinkModal, setShowEditLinkModal] = useState(false);\n  const [showConfirmDeleteModal, setShowConfirmDeleteModal] = useState(false);\n  const [deleteLinkId, setDeleteLinkId] = useState(-1);\n  const [editLink, setEditLink] = useState(null);\n\n  const INVALID_LINK_INDEX = -1;\n\n  const handleDeleteLink = useCallback((linkId) => {\n    setShowConfirmDeleteModal(true);\n    setDeleteLinkId(linkId);\n  }, []);\n\n  const deleteLink = () => {\n    props.setUserLinks((prevUserLinks) => {\n      let updatedUserLinks = [...prevUserLinks];\n      const deleteLinkIndex = updatedUserLinks.findIndex(userLink => userLink.id === deleteLinkId);\n      if (deleteLink == INVALID_LINK_INDEX) {\n        return updatedUserLinks;\n      }\n      updatedUserLinks.splice(deleteLinkIndex, 1);\n      return updatedUserLinks;\n    }); \n    setShowConfirmDeleteModal(false);\n\n    const requestOptions = {\n      method: 'DELETE'\n    };\n    const url = `${BEACONS_BACKEND_API_BASE_URL}/${deleteLinkId}`;\n    fetch(url, requestOptions);\n  }\n\n  const handleEditLink = useCallback((linkId) => {\n    const editLinkIndex = props.userLinks.findIndex(userLink => userLink.id === linkId);\n    if (editLinkIndex == INVALID_LINK_INDEX) {\n      return;\n    }\n\n    setEditLink({...props.userLinks[editLinkIndex]});\n    setShowEditLinkModal(true);\n  }, []);\n\n  return (\n    <div className=\"links-editor-container\">\n      <h2 className=\"links-editor-header\">Links Editor</h2>\n      <span className=\"settings-btn\" onClick={() => setShowSettings(true)}>&#9881;</span>\n      <ul className=\"editable-links\">\n        {props.userLinks.map((userLink, index) => (\n          <EditableLink\n            key={userLink.id} \n            linkId={userLink.id}\n            linkTitle={userLink.title}\n            linkUrl={userLink.url}\n            linkClicks={userLink.clicks}\n            handleEditLink={handleEditLink}\n            handleDeleteLink={handleDeleteLink}\n          />\n        ))}\n      </ul>\n      <div className=\"create-link-btn-container\">\n        <span className=\"create-link-btn\" onClick={() => setShowNewLinkModal(true)}>Add Link</span>\n      </div>\n      {showNewLinkModal &&\n        <CreateLinkModal \n          setShowNewLinkModal={setShowNewLinkModal}\n          setUserLinks={props.setUserLinks}\n        />\n      }\n      {showSettings &&\n        <SettingsModal \n          linkBackgroundColor={props.linkBackgroundColor}\n          linkColor={props.linkColor}\n          isLinkEdgeRounded={props.isLinkEdgeRounded}\n          setLinkBackgroundColor={props.setLinkBackgroundColor}\n          setLinkColor={props.setLinkColor}\n          setIsLinkEdgeRounded={props.setIsLinkEdgeRounded}\n          setShowSettings={setShowSettings}\n        />\n      }\n      {showEditLinkModal &&\n        <EditLinkModal\n          setShowEditLinkModal={setShowEditLinkModal}\n          editLink={editLink}\n          setUserLinks={props.setUserLinks}\n        />\n      }\n      {showConfirmDeleteModal &&\n        <ConfirmLinkDeletionModal\n        showConfirmDeleteModal={showConfirmDeleteModal} \n          setShowConfirmDeleteModal={setShowConfirmDeleteModal}\n          deleteLink={deleteLink}\n        />\n      }      \n    </div>\n  );\n}\n\nLinksEditor.propTypes = {\n  userLinks: PropTypes.array.isRequired,\n  setUserLinks: PropTypes.func.isRequired,\n  linkBackgroundColor: PropTypes.string.isRequired,\n  linkColor: PropTypes.string.isRequired,\n  isLinkEdgeRounded: PropTypes.bool.isRequired,\n  setLinkBackgroundColor: PropTypes.func.isRequired,\n  setLinkColor: PropTypes.func.isRequired,\n  setIsLinkEdgeRounded: PropTypes.func.isRequired\n};\n \nexport default LinksEditor;","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/links_preview.js",[],"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/create_link_modal.js",["58"],"\n/**\n * Modal to create new link\n *\n * @copyright 2021 Beacons - All rights reserved\n */\n\n import './styles/create_link_modal.scss';\n import React, {useState} from 'react';\n import {Modal} from 'react-bootstrap';\n import PropTypes from 'prop-types';\n import validator from 'validator';\n import { BEACONS_BACKEND_API_BASE_URL } from './core/api_constants';\n\nconst CreateLinkModal = (props) => {\n  const [linkTitle, setLinkTitle] = useState('');\n  const [linkUrl, setLinkUrl] = useState('');\n  const [formErrorMsg, setFormErrorMsg] = useState('');\n\n  const handleLinkTitleChange = (event) => {\n    const intputTitle = event.target.value;\n    setLinkTitle(intputTitle);\n  };\n\n  const handleLinkUrlChange = (event) => {\n    const intputUrl = event.target.value;\n    setLinkUrl(intputUrl);\n  };\n\n  const handleSubmit = () => {\n    if (linkTitle == '') {\n      setFormErrorMsg('Please provide a valid title.');\n      return;\n    }\n    if (!validator.isURL(linkUrl)) {\n      setFormErrorMsg('Please provide a valid url.');\n      return;\n    }\n\n    const newUserLink = {\n      title: linkTitle,\n      url: linkUrl,\n      clicks: 0\n    }\n\n    props.setUserLinks(prevUserLinks => {\n      // Get current max id for links\n      const maxId = Math.max(...prevUserLinks.map(link => link.id));\n      // We use the locally created link so we do not need to wait for an API response\n      const localNewUserLink = {...newUserLink, id: maxId + 1}\n      return [...prevUserLinks, localNewUserLink];\n    });\n    saveNewLink(newUserLink);\n    props.setShowNewLinkModal(false);\n  };\n\n  const saveNewLink = (newLink) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newLink)\n    };\n    fetch(BEACONS_BACKEND_API_BASE_URL , requestOptions);\n  }\n\n  return (\n    <Modal show={true} onHide={() => props.setShowNewLinkModal(false)} animation={false}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create Link</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n      <input className=\"create-link-modal-input\" type=\"text\" placeholder=\"Link Title\" onChange={handleLinkTitleChange} />\n        <input className=\"create-link-modal-input\" type=\"text\" placeholder=\"Link Url\" onChange={handleLinkUrlChange} />\n        <button className=\"create-link-submit-btn\" onClick={handleSubmit}>Add Link</button>\n        <span className=\"create-link-error-msg\">{formErrorMsg}</span>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nCreateLinkModal.propTypes = {\n  setShowNewLinkModal: PropTypes.func.isRequired,\n  setUserLinks: PropTypes.func.isRequired\n};\n\nexport default CreateLinkModal;","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/edit_link_modal.js",["59","60"],"/**\n * Modal to edit link\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\n import './styles/edit_link_modal.scss';\n import React, {useState} from 'react';\n import {Modal} from 'react-bootstrap';\n import PropTypes from 'prop-types';\n import validator from 'validator';\n import { BEACONS_BACKEND_API_BASE_URL } from './core/api_constants';\n\nconst EditLinkModal = (props) => {\n  const [linkTitle, setLinkTitle] = useState(props.editLink.title);\n  const [linkUrl, setLinkUrl] = useState(props.editLink.url);\n  const [formErrorMsg, setFormErrorMsg] = useState('');\n\n  const INVALID_LINK_INDEX = -1;\n\n  const handleLinkTitleChange = (event) => {\n    const intputTitle = event.target.value;\n    setLinkTitle(intputTitle);\n  };\n\n  const handleLinkUrlChange = (event) => {\n    const intputUrl = event.target.value;\n    setLinkUrl(intputUrl);\n  };\n\n  const handleSubmit = (linkId) => {\n    if (linkTitle == '') {\n      setFormErrorMsg('Please provide a valid title.');\n      return;\n    }\n    if (!validator.isURL(linkUrl)) {\n      setFormErrorMsg('Please provide a valid url.');\n      return;\n    }\n\n    props.setUserLinks(prevUserLinks => {\n      let updatedUserLinks = [...prevUserLinks]\n      const updatedLinkIndex = updatedUserLinks.findIndex(userLink => userLink.id === linkId);\n      if (updatedLinkIndex == INVALID_LINK_INDEX) {\n        return updatedUserLinks;\n      }\n\n      props.editLink.title = linkTitle;\n      props.editLink.url = linkUrl;\n      updatedUserLinks[updatedLinkIndex] = props.editLink\n      return updatedUserLinks;\n    });\n\n    const updatedLinkData = {\n      title: linkTitle,\n      url: linkUrl\n    }\n    saveNewLink(updatedLinkData, linkId);\n    props.setShowEditLinkModal(false);\n  };\n\n  const saveNewLink = (updatedLinkData, linkId) => {\n    const requestOptions = {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(updatedLinkData)\n    };\n    const url = `${BEACONS_BACKEND_API_BASE_URL}/${linkId}`;\n    fetch(url, requestOptions);\n  }\n\n  return (\n    <Modal show={true} onHide={() => props.setShowEditLinkModal(false)} animation={false}>\n      <Modal.Header closeButton>\n        <Modal.Title>Edit Post</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <span className=\"edit-link-modal-label\">Update Title</span>\n        <input className=\"edit-link-modal-input\" type=\"text\" placeholder={props.editLink.title} onChange={handleLinkTitleChange} />\n        <span className=\"edit-link-modal-label\">Update Url</span>\n        <input className=\"edit-link-modal-input\" type=\"text\" placeholder={props.editLink.url} onChange={handleLinkUrlChange} />\n        <button className=\"edit-link-submit-btn\" onClick={() => handleSubmit(props.editLink.id)}>Edit Link</button>\n        <span className=\"edit-link-error-msg\">{formErrorMsg}</span>\n      </Modal.Body>\n    </Modal>\n  );\n}\n\nEditLinkModal.propTypes = {\n  setShowEditLinkModal: PropTypes.func.isRequired,\n  editLink: PropTypes.object.isRequired,\n  setUserLinks: PropTypes.func.isRequired\n};\n\nexport default EditLinkModal;","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/editable_link.js",[],"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/preview_link.js",["61","62","63"],"\n/**\n * Preview link\n *\n * @copyright 2021 Adam Carlson - All rights reserved\n */\n\nimport PropTypes from 'prop-types';\nimport './styles/preview_link.scss';\nimport React, {useState} from 'react';\nimport { BEACONS_BACKEND_API_BASE_URL } from './core/api_constants';\n\nconst PreviewLink = (props) => {\n  // I will keep this log here so you can confirm unnecessary link re-renders are not ocurring\n  console.log(\"rendering preview link\");\n\n  const INVALID_LINK_INDEX = -1;\n\n  const linkBackgroundStyle = {\n    backgroundColor: props.linkBackgroundColor\n  };\n\n  const linkColorStyle = {\n    color: props.linkColor\n  }\n\n  const isLinkRoundedEdgeCSSClass = props.isLinkEdgeRounded ? 'rounded-link-edge' : '';\n\n  const trackLinkClick = () => {\n    const updatedClicks = props.linkClicks + 1;\n    props.setUserLinks(prevUserLinks => {\n      let updatedUserLinks = [...prevUserLinks]\n      const updatedLinkIndex = updatedUserLinks.findIndex(userLink => userLink.id === props.linkId);\n      if (updatedLinkIndex == INVALID_LINK_INDEX) {\n        return updatedUserLinks;\n      }\n  \n      updatedUserLinks[updatedLinkIndex].clicks = updatedClicks;\n      return updatedUserLinks;\n    });\n\n\n    const requestOptions = {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({clicks: updatedClicks})\n    };\n    const url = `${BEACONS_BACKEND_API_BASE_URL}/${props.linkId}`;\n    fetch(url, requestOptions);\n  };\n\n  return (\n    <li className={`live-link-item ${isLinkRoundedEdgeCSSClass}`} style={linkBackgroundStyle} onClick={trackLinkClick}>\n      <a className=\"live-link-anchor\" href={props.linkUrl} style={linkColorStyle} target=\"_blank\">{props.linkTitle}</a>\n    </li>\n  );\n }\n\nPreviewLink.propTypes = {\n  linkId: PropTypes.number.isRequired,\n  linkTitle: PropTypes.string.isRequired,\n  linkUrl: PropTypes.string.isRequired,\n  linkClicks: PropTypes.number.isRequired,\n  setUserLinks: PropTypes.func.isRequired,\n  linkBackgroundColor: PropTypes.string.isRequired,\n  linkColor: PropTypes.string.isRequired,\n  isLinkEdgeRounded: PropTypes.bool.isRequired\n};\n \nexport default React.memo(PreviewLink);","/Users/adamcarlson/Desktop/beacons-coding-assessment/src/settings_modal.js",[],"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/confirm_link_deletion_modal.js",[],"/Users/adamcarlson/Desktop/beacons-coding-assessment/src/core/api_constants.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":13,"column":8,"nodeType":"70","messageId":"71","endLine":13,"endColumn":17},{"ruleId":"72","severity":1,"message":"73","line":38,"column":22,"nodeType":"74","messageId":"75","endLine":38,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":55,"column":23,"nodeType":"74","messageId":"75","endLine":55,"endColumn":25},{"ruleId":"76","severity":1,"message":"77","line":61,"column":6,"nodeType":"78","endLine":61,"endColumn":8,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"73","line":31,"column":19,"nodeType":"74","messageId":"75","endLine":31,"endColumn":21},{"ruleId":"72","severity":1,"message":"73","line":32,"column":19,"nodeType":"74","messageId":"75","endLine":32,"endColumn":21},{"ruleId":"72","severity":1,"message":"73","line":44,"column":28,"nodeType":"74","messageId":"75","endLine":44,"endColumn":30},{"ruleId":"68","severity":1,"message":"80","line":10,"column":16,"nodeType":"70","messageId":"71","endLine":10,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":34,"column":28,"nodeType":"74","messageId":"75","endLine":34,"endColumn":30},{"ruleId":"81","severity":1,"message":"82","line":54,"column":7,"nodeType":"83","messageId":"84","endLine":54,"endColumn":99,"fix":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'INVALID_LINK_INDEX' and 'props.userLinks'. Either include them or remove the dependency array. If 'setEditLink' needs the current value of 'props.userLinks', you can also switch to useReducer instead of useState and read 'props.userLinks' in the reducer.","ArrayExpression",["88"],"'useState' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"89","text":"90"},"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},[1675,1675]," rel=\"noreferrer\"","Update the dependencies array to be: [INVALID_LINK_INDEX, props.userLinks]",{"range":"93","text":"94"},[2087,2089],"[INVALID_LINK_INDEX, props.userLinks]"]